import java.util.ArrayList;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

/**
 * The SendEmail class uses the javax.mail API. The class
 * constructs and sends an email notification.
 *
 * @author	Stephanie Derosier
 * @version	1.0
 */
public class SendEmail {

	private Properties properties;
	private String email_message;	  //generic section of email
	private String personal_message;  //optional personalized message from sender
	private String autoGen_message;	  //states that email was autogenerated
	private String subject;			  //subject line of email
	private String senderEmail;
	private String senderPassword;
	private ArrayList<Recipient> recipList;
	private EmailNotification emailNotification;

	/**
	 * Creates an instance of a SendEmail object. Sender and recipient
	 * information passed to constructor and assigned to class data members.
	 * <p>
	 * Defines connection properties for email and calls
	 * method to construct email message.
	 *
	 * @param	not			Workspace plugin instance
	 * @param	sEmail		Sender's email as String
	 * @param	sPassword	Sender's password as decrypted String
	 * @param	rList		List of email notification recipients
	 * @param	pMessage	Personal message from sender
	 */
	public SendEmail(final EmailNotification not, String sEmail, 
			String sPassword, ArrayList<Recipient> rList, String pMessage)
	{
		emailNotification = not;
		senderEmail = sEmail;
		senderPassword = sPassword;
		recipList = rList;
		personal_message = "\n" + pMessage;

		//set connection properties
		properties = new Properties();
		properties.setProperty("mail.smtp.auth", "true");
		properties.setProperty("mail.smtp.starttls.enable", "true");
		properties.setProperty("mail.smtp.host", "smtp.gmail.com");
		properties.setProperty("mail.smtp.port", "587");
		properties.setProperty("mail.smtp.ssl.trust", "smtp.gmail.com");

		SetMessage();	//construct message
	}
	/**
	 * Construct email notification message. Consists of hardcoded subject line,
	 * hardcoded generic message about workspace (includes name of workspace), and
	 * a notice that email was autogenerated.
	 */
	private void SetMessage()
	{		
		subject = "FlowJo Workspace Notification";
		email_message = "The workspace: '" + emailNotification.getWorkspaceName() + "' has been saved.";
		autoGen_message = "\n\nThis email is autogenerated.";
	}
	/**
	 * Send email notification to recipients in list from sender's email address.
	 * <p>
	 * This method creates a javax.mail session, constructs the email message containing
	 * all parts of email, and sends email notification to all recipients. If an exception 
	 * is thrown, a SendErrorGUI object will be created to get input from the user on how 
	 * to precede.
	 * 
	 * @exception	MessagingException	Throws MessagingException in case of send error
	 */
	public void Send()
	{
		Session session = Session.getDefaultInstance(properties, 
				new Authenticator() { 
			@Override
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(senderEmail, senderPassword);
			}});

		try {
			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress(senderEmail));

			//construct comma separated string of email recipients
			String toAddresses = "";
			for(Recipient recip : recipList)
			{
				toAddresses += recip.getToEmailAddress() + ",";
			}
			//parse recipients string into array
			InternetAddress[] iAdressArray = InternetAddress.parse(toAddresses);
			message.setRecipients(Message.RecipientType.TO, iAdressArray);

			//construct multipart message containing message components
			message.setSubject(subject);
			Multipart multipart = new MimeMultipart();

			BodyPart messageBodyPart = new MimeBodyPart();
			messageBodyPart.setText(email_message);
			multipart.addBodyPart(messageBodyPart);

			messageBodyPart = new MimeBodyPart();
			messageBodyPart.setText(personal_message);
			multipart.addBodyPart(messageBodyPart);

			messageBodyPart = new MimeBodyPart();
			messageBodyPart.setText(autoGen_message);
			multipart.addBodyPart(messageBodyPart);

			//set contents of message and send
			message.setContent(multipart);
			Thread.currentThread().setContextClassLoader( getClass().getClassLoader() );
			Transport.send(message);

		} catch(MessagingException err)
		{
			//display Error GUI in case of exception
			new SendErrorGUI(err.toString(), emailNotification);
		}

	}
}

